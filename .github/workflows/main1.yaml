name: Cherry Pick Workflow

on:
  # Triggered manually with inputs
  workflow_dispatch:
    inputs:
      commit_hash:
        description: 'Commit hash to cherry-pick'
        required: true
      source_branch:
        description: 'Source branch (where the commit is located)'
        required: true
      target_branch:
        description: 'Target branch (where to cherry-pick to)'
        required: true
      pr_title:
        description: 'PR title (for conflict resolution)'
        required: true
        default: 'Cherry-pick with conflicts'
      pr_body:
        description: 'PR body (for conflict resolution)'
        required: false
        default: 'This PR was created automatically to resolve cherry-pick conflicts'

jobs:
  cherry_pick:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set Git user
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          
      - name: Setup source and target info
        run: |
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
          echo "NEW_BRANCH=cherry-pick-$(echo ${{ github.event.inputs.commit_hash }} | cut -c1-8)-${{ github.event.inputs.target_branch }}-${TIMESTAMP}" >> $GITHUB_ENV
      
      - name: Attempt direct cherry-pick
        id: direct_cherry_pick
        run: |
          # First, try direct cherry-pick to target branch
          git checkout ${{ github.event.inputs.target_branch }}
          git pull origin ${{ github.event.inputs.target_branch }}
          
          if git cherry-pick ${{ github.event.inputs.commit_hash }}; then
            echo "✅ Cherry-pick successful, pushing to target branch"
            git push origin ${{ github.event.inputs.target_branch }}
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Cherry-pick failed, will try with conflict resolution"
            git cherry-pick --abort
            echo "result=failed" >> $GITHUB_OUTPUT
          fi

      - name: Create branch for conflict resolution
        if: steps.direct_cherry_pick.outputs.result == 'failed'
        run: |
          # Create a new branch based on target
          git checkout ${{ github.event.inputs.target_branch }}
          git pull origin ${{ github.event.inputs.target_branch }}
          git checkout -b ${{ env.NEW_BRANCH }}
          
          echo "📋 Created new branch ${{ env.NEW_BRANCH }} based on ${{ github.event.inputs.target_branch }}"

      - name: Apply cherry-pick on new branch
        if: steps.direct_cherry_pick.outputs.result == 'failed'
        id: conflict_pick
        run: |
          # Try cherry-pick - this will fail with conflicts
          if ! git cherry-pick ${{ github.event.inputs.commit_hash }}; then
            # We expect this to fail with conflicts
            echo "🧨 Cherry-pick encountered conflicts, as expected"
            
            # Store variables for easier reference
            COMMIT_HASH="${{ github.event.inputs.commit_hash }}"
            SOURCE_BRANCH="${{ github.event.inputs.source_branch }}"
            
            # Add all files including conflicts
            git add --all
            
            # Commit with the conflict markers - use a simple message to avoid syntax issues
            git -c core.editor=true commit -m "Cherry-pick ${COMMIT_HASH} with conflicts" -m "This commit contains conflicts that need manual resolution" || echo "Failed to commit, but continuing"
            
            echo "Committed conflicts to the branch"
          else
            echo "🎉 Surprisingly, cherry-pick succeeded on the new branch"
          fi

      - name: Push branch and create PR
        if: steps.direct_cherry_pick.outputs.result == 'failed'
        run: |
          # Try to push the branch - either with resolved cherry-pick or with conflicts
          git push origin ${{ env.NEW_BRANCH }}
          
          # Create PR using GitHub CLI
          gh pr create \
            --base ${{ github.event.inputs.target_branch }} \
            --head ${{ env.NEW_BRANCH }} \
            --title "${{ github.event.inputs.pr_title }} - Cherry-pick $(echo ${{ github.event.inputs.commit_hash }} | cut -c1-8)" \
            --body "This PR attempts to cherry-pick commit ${{ github.event.inputs.commit_hash }} from ${{ github.event.inputs.source_branch }} to ${{ github.event.inputs.target_branch }}.
            
            ${{ github.event.inputs.pr_body }}
            
            The cherry-pick operation encountered conflicts that need to be resolved manually."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
